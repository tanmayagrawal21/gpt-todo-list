import{a as h}from"./index.89d23345.js";function y(o,e){const t=new Set;for(const i of e)o.has(i)&&t.add(i);return t}function v(o,e){const t=new Set(o);for(const i of e)t.add(i);return t}function c(o,e){const t=new Set(o);for(const i of e)t.delete(i);return t}function l(o){return Array.from(o).map(e=>`"${e}"`).join(", ")}class d extends h{get inputKeys(){return this.inputVariables}get outputKeys(){return this.outputVariables}constructor(e){var t,i;if(super(e),Object.defineProperty(this,"chains",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"inputVariables",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"outputVariables",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"returnAll",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.chains=e.chains,this.inputVariables=e.inputVariables,this.outputVariables=(t=e.outputVariables)!=null?t:[],this.outputVariables.length>0&&e.returnAll)throw new Error("Either specify variables to return using `outputVariables` or use `returnAll` param. Cannot apply both conditions at the same time.");this.returnAll=(i=e.returnAll)!=null?i:!1,this._validateChains()}_validateChains(){var u,a;if(this.chains.length===0)throw new Error("Sequential chain must have at least one chain.");const e=(a=(u=this.memory)==null?void 0:u.memoryKeys)!=null?a:[],t=new Set(this.inputKeys),i=new Set(e),n=y(t,i);if(n.size>0)throw new Error(`The following keys: ${l(n)} are overlapping between memory and input keys of the chain variables. This can lead to unexpected behaviour. Please use input and memory keys that don't overlap.`);const s=v(t,i);for(const r of this.chains){const p=c(new Set(r.inputKeys),s);if(p.size>0)throw new Error(`Missing variables for chain "${r._chainType()}": ${l(p)}. Only got the following variables: ${l(s)}.`);const f=new Set(r.outputKeys),b=y(s,f);if(b.size>0)throw new Error(`The following output variables for chain "${r._chainType()}" are overlapping: ${l(b)}. This can lead to unexpected behaviour.`);for(const m of f)s.add(m)}if(this.outputVariables.length===0)if(this.returnAll){const r=c(s,t);this.outputVariables=Array.from(r)}else this.outputVariables=this.chains[this.chains.length-1].outputKeys;else{const r=c(new Set(this.outputVariables),new Set(s));if(r.size>0)throw new Error(`The following output variables were expected to be in the final chain output but were not found: ${l(r)}.`)}}async _call(e,t){let i={};const n=e;let s=0;for(const a of this.chains){s+=1,i=await a.call(n,t==null?void 0:t.getChild(`step_${s}`));for(const r of Object.keys(i))n[r]=i[r]}const u={};for(const a of this.outputVariables)u[a]=n[a];return u}_chainType(){return"sequential_chain"}static async deserialize(e){const t=[],i=e.input_variables,n=e.output_variables,s=e.chains;for(const u of s){const a=await h.deserialize(u);t.push(a)}return new d({chains:t,inputVariables:i,outputVariables:n})}serialize(){const e=[];for(const t of this.chains)e.push(t.serialize());return{_type:this._chainType(),input_variables:this.inputVariables,output_variables:this.outputVariables,chains:e}}}class w extends h{get inputKeys(){return[this.inputKey]}get outputKeys(){return[this.outputKey]}constructor(e){var t;super(e),Object.defineProperty(this,"chains",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"inputKey",{enumerable:!0,configurable:!0,writable:!0,value:"input"}),Object.defineProperty(this,"outputKey",{enumerable:!0,configurable:!0,writable:!0,value:"output"}),Object.defineProperty(this,"trimOutputs",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.chains=e.chains,this.trimOutputs=(t=e.trimOutputs)!=null?t:!1,this._validateChains()}_validateChains(){for(const e of this.chains){if(e.inputKeys.length!==1)throw new Error(`Chains used in SimpleSequentialChain should all have one input, got ${e.inputKeys.length} for ${e._chainType()}.`);if(e.outputKeys.length!==1)throw new Error(`Chains used in SimpleSequentialChain should all have one output, got ${e.outputKeys.length} for ${e._chainType()}.`)}}async _call(e,t){let i=e[this.inputKey],n=0;for(const s of this.chains)n+=1,i=await s.run(i,t==null?void 0:t.getChild(`step_${n}`)),this.trimOutputs&&(i=i.trim()),await(t==null?void 0:t.handleText(i));return{[this.outputKey]:i}}_chainType(){return"simple_sequential_chain"}static async deserialize(e){const t=[],i=e.chains;for(const n of i){const s=await h.deserialize(n);t.push(s)}return new w({chains:t})}serialize(){const e=[];for(const t of this.chains)e.push(t.serialize());return{_type:this._chainType(),chains:e}}}export{d as SequentialChain,w as SimpleSequentialChain};
